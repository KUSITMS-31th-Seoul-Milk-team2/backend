name: CI/CD with Docker & SSH

on:
  pull_request:
    branches:
      - dev

  push:
    branches:
      - dev
      - fix/#13-cicd-fix

  workflow_dispatch:

jobs:
  ci:
    name: Run CI
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: 'fix/#13-cicd-fix'

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: application.yml 설정
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YAML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YAML_TEST }}" | base64 --decode > src/test/resources/application-test.yml
          find src

      - name: Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: 프로젝트 빌드
        run: ./gradlew dependencies --refresh-dependencies

      - name: 빌드된 JAR 파일 확인
        run: ls -la build/libs

      - name: 빌드된 JAR 파일 저장
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: build/libs/*.jar

      - name: 테스트 실행
        run: ./gradlew test

  cd:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 빌드된 JAR 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: build/libs

      - name: Docker 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest .

      - name: Docker Hub에 Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest

      - name: SSH로 서버에 접속 후 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # 오류 발생 시 즉시 중단
            cd ~/backend  # 프로젝트 경로
            git pull
            docker-compose down
            docker-compose up -d --force-recreate --remove-orphans
            docker image prune -f  # 오래된 이미지 정리